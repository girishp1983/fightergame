import * as THREE from "three"; class Game { constructor() { this.scene = new THREE.Scene(); this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); this.renderer = new THREE.WebGLRenderer(); this.clock = new THREE.Clock(); this.score = 0; this.health = 100; this.gameOver = false; this.bullets = []; this.enemies = []; this.playerSpeed = 0.5; this.bulletSpeed = 1; this.enemySpeed = 0.3; this.lastEnemySpawn = 0; this.enemySpawnInterval = 2000; this.keys = {}; this.init(); } init() { this.renderer.setSize(window.innerWidth, window.innerHeight); document.body.appendChild(this.renderer.domElement); this.camera.position.set(0, 2, 5); this.camera.lookAt(0, 0, 0); const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); this.scene.add(ambientLight); const directionalLight = new THREE.DirectionalLight(0xffffff, 1); directionalLight.position.set(5, 5, 5); this.scene.add(directionalLight); const geometry = new THREE.BoxGeometry(1, 0.3, 1); const material = new THREE.MeshPhongMaterial({ color: 0x00ff00 }); this.player = new THREE.Mesh(geometry, material); this.scene.add(this.player); window.addEventListener("resize", () => this.onWindowResize()); window.addEventListener("keydown", (e) => this.keys[e.key.toLowerCase()] = true); window.addEventListener("keyup", (e) => this.keys[e.key.toLowerCase()] = false); window.addEventListener("mousedown", () => this.shoot()); document.getElementById("restart-button").addEventListener("click", () => this.restart()); this.animate(); } shoot() { if (this.gameOver) return; const bulletGeometry = new THREE.SphereGeometry(0.1); const bulletMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 }); const bullet = new THREE.Mesh(bulletGeometry, bulletMaterial); bullet.position.copy(this.player.position); bullet.velocity = new THREE.Vector3(0, 0, -this.bulletSpeed); this.scene.add(bullet); this.bullets.push(bullet); } spawnEnemy() { const now = Date.now(); if (now - this.lastEnemySpawn < this.enemySpawnInterval) return; const geometry = new THREE.BoxGeometry(0.8, 0.8, 0.8); const material = new THREE.MeshPhongMaterial({ color: 0xff0000 }); const enemy = new THREE.Mesh(geometry, material); enemy.position.x = Math.random() * 10 - 5; enemy.position.z = -20; enemy.position.y = Math.random() * 5; this.scene.add(enemy); this.enemies.push(enemy); this.lastEnemySpawn = now; } updateBullets() { for (let i = this.bullets.length - 1; i >= 0; i--) { const bullet = this.bullets[i]; bullet.position.add(bullet.velocity); if (bullet.position.z < -50) { this.scene.remove(bullet); this.bullets.splice(i, 1); continue; } for (let j = this.enemies.length - 1; j >= 0; j--) { const enemy = this.enemies[j]; if (bullet.position.distanceTo(enemy.position) < 1) { this.scene.remove(bullet); this.bullets.splice(i, 1); this.scene.remove(enemy); this.enemies.splice(j, 1); this.score += 10; document.getElementById("score").textContent = `Score: ${this.score}`; break; } } } } updateEnemies() { for (let i = this.enemies.length - 1; i >= 0; i--) { const enemy = this.enemies[i]; enemy.position.z += this.enemySpeed; if (enemy.position.distanceTo(this.player.position) < 1) { this.health -= 20; document.getElementById("health").textContent = `Health: ${this.health}`; this.scene.remove(enemy); this.enemies.splice(i, 1); if (this.health <= 0) { this.gameOver = true; document.getElementById("game-over").style.display = "block"; document.getElementById("final-score").textContent = `Final Score: ${this.score}`; } continue; } if (enemy.position.z > 10) { this.scene.remove(enemy); this.enemies.splice(i, 1); } } } updatePlayer() { if (this.keys["w"]) this.player.position.y += this.playerSpeed; if (this.keys["s"]) this.player.position.y -= this.playerSpeed; if (this.keys["a"]) this.player.position.x -= this.playerSpeed; if (this.keys["d"]) this.player.position.x += this.playerSpeed; this.player.position.x = Math.max(-5, Math.min(5, this.player.position.x)); this.player.position.y = Math.max(-2, Math.min(5, this.player.position.y)); } restart() { this.score = 0; this.health = 100; this.gameOver = false; document.getElementById("score").textContent = "Score: 0"; document.getElementById("health").textContent = "Health: 100"; document.getElementById("game-over").style.display = "none"; this.enemies.forEach(enemy => this.scene.remove(enemy)); this.bullets.forEach(bullet => this.scene.remove(bullet)); this.enemies = []; this.bullets = []; this.player.position.set(0, 0, 0); } onWindowResize() { this.camera.aspect = window.innerWidth / window.innerHeight; this.camera.updateProjectionMatrix(); this.renderer.setSize(window.innerWidth, window.innerHeight); } animate() { requestAnimationFrame(() => this.animate()); if (!this.gameOver) { this.updatePlayer(); this.updateBullets(); this.spawnEnemy(); this.updateEnemies(); } this.renderer.render(this.scene, this.camera); } } new Game();
